#Эта программа высчитывает рейтинг каждого фильма, учитывая количество пользователей,посмотревших его
users = {
    'user_1': {"Интерстеллар", "Начало", "Дюна", "Матрица", "Аватар"},
    'user_2': {"Дюна", "Матрица", "Бегущий по лезвию 2049", "Престиж", "Аватар"},
    'user_3': {"Начало", "Довод", "Престиж", "Интерстеллар", "Темный рыцарь"},
    'user_4': {"Аватар", "Бегущий по лезвию 2049", "Чужой", "Прометей", "Дюна"},
    'user_5': {"Темный рыцарь", "Начало", "Матрица", "Престиж", "Интерстеллар"}
}

total_films = set.union(*users.values()) #формируем общий список фильмов
user_choose = input('Выберите пользователя для рекомендаций: ')
user_rec = total_films - users[user_choose] #высчитываем фильмы, которые следует посоветовать пользователю

rate = 0 #изначальный рейтинг каждого фильма = 0, а список оценок пуст
rate_score = []

for film in total_films: #пробегаемся по каждому фильму в общем списке и каждому фильму каждого пользователя
    for user_films in users.values():
        if film in user_films: #при совпадениях увеличиваем рейтинг
            rate += 1
    res_for_film = {'Фильм': film, 'Рейтинг' : rate} #формируем запись в виде словаря и добавляем его в список оценок
    rate_score.append(res_for_film)
    rate = 0 #обнуляем рейтинг

#сортируем рекомендации по убыванию популярности
res = sorted(rate_score, 
             key=lambda f:f['Рейтинг'], 
             reverse = True)

#сортируем user_rec на основе res
final_rec_res = sorted(user_rec,
                       key=lambda f: next(item['Рейтинг'] for item in res if item['Фильм'] == f),
                       reverse=True)

print(f'Рекомендации для {user_choose}: {", ".join(final_rec_res)}')

#возможно, следует добавить отображение рейтинга фильма при последнем выводе